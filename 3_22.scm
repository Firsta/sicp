(define (make-queue)
    (let ((front-ptr '())
            (rear-ptr '()))
        (define (empty-queue?)
            (null? front-ptr))
        (define (insert-queue! elem)
            (cond ((empty-queue?)
                (let ((init-list (list elem)))
                    (set! front-ptr init-list)
                    (set! rear-ptr init-list)
                    front-ptr))
                (else
                    (let ((new-elem (list elem)))
                        (set-cdr! rear-ptr new-elem)
                        (set! rear-ptr new-elem)
                        front-ptr))))
        (define (delete-queue!)
            (cond ((empty-queue?) (error "DELETE! called with an empty queue" queue))
            (else (set! front-ptr (cdr front-ptr)) front-ptr)))

        (define (dispatch op)
            (cond 
                ((eq? op 'empty-queue?) empty-queue?)
                ((eq? op 'insert-queue!) insert-queue!)
                ((eq? op 'delete-queue!) delete-queue!)
                (else (error "Undifined option" op))))
        dispatch))

(define q (make-queue))
((q 'insert-queue!) 'a)
((q 'insert-queue!) 'b)
((q 'delete-queue!))